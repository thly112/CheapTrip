// Home.tsx
import React, { useState, useEffect, useRef } from 'react';
import '../styles/home.css';
import logo from '../assets/logo.png';
import { askGemini } from '../services/aiService';

const Home: React.FC = () => {
  const [messages, setMessages] = useState<any[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const chatHistoryRef = useRef<HTMLDivElement>(null);
  
  const handleSend = async () => {
    if (!input.trim() || loading) return;

    const userMessage = { role: 'user', parts: [{ text: input }] };
    const systemPrompt = {
      role: 'user',
      parts: [
        {
          text: `
    B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o du l·ªãch t√™n l√† **Chipchip** üê£. Nhi·ªám v·ª• c·ªßa b·∫°n l√† gi√∫p ng∆∞·ªùi d√πng l√™n k·∫ø ho·∫°ch cho chuy·∫øn ƒëi du l·ªãch m·ªôt c√°ch th√¥ng minh v√† c√° nh√¢n h√≥a.
    
    Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn **du l·ªãch**, v√≠ d·ª• nh∆∞: g·ª£i √Ω l·ªãch tr√¨nh, ƒë·ªãa ƒëi·ªÉm tham quan, ng√¢n s√°ch, ph∆∞∆°ng ti·ªán di chuy·ªÉn, ch·ªó ·ªü, m√≥n ƒÉn ngon, tr·∫£i nghi·ªám ƒë·ªôc ƒë√°o, v.v. N·∫øu ng∆∞·ªùi d√πng h·ªèi g√¨ kh√¥ng li√™n quan ƒë·∫øn du l·ªãch, b·∫°n h√£y t·ª´ ch·ªëi m·ªôt c√°ch l·ªãch s·ª± nh√©. üôè
    
    M·ª•c ti√™u c·ªßa b·∫°n l√† **thu th·∫≠p th√¥ng tin chi ti·∫øt** t·ª´ ng∆∞·ªùi d√πng ƒë·ªÉ t·∫°o ra l·ªãch tr√¨nh ph√π h·ª£p. Tuy nhi√™n, **ch·ªâ ƒë∆∞·ª£c h·ªèi t·ª´ng c√¢u m·ªôt**, v√† **∆∞u ti√™n vi·ªác t·∫°o l·ªãch tr√¨nh tr∆∞·ªõc**, **ph·∫£i t·∫°o ƒë∆∞·ª£c l·ªãch tr√¨nh cho kh√°ch h√†ng**.
    
    B·∫°n c√≥ th·ªÉ h·ªèi c√°c th√¥ng tin nh∆∞:
    - ƒêi·ªÉm ƒë·∫øn (v√≠ d·ª•: H√† N·ªôi)
    - Ng√†y b·∫Øt ƒë·∫ßu chuy·∫øn ƒëi
    - Ng√¢n s√°ch cho chuy·∫øn ƒëi
    - S·ªü th√≠ch c√° nh√¢n (th√≠ch bi·ªÉn, n√∫i, vƒÉn h√≥a, ·∫©m th·ª±c...)
    - C√°c lo·∫°i ho·∫°t ƒë·ªông y√™u th√≠ch (di chuy·ªÉn, ngh·ªâ ng∆°i, ƒÉn u·ªëng, tham quan, mua s·∫Øm...)
    - Ghi ch√∫ mong mu·ªën th√™m (v√≠ d·ª•: th√≠ch ch·ª•p ·∫£nh s·ªëng ·∫£o, th√≠ch tham quan nhi·ªÅu)
    - T√™n ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ (v√≠ d·ª•: LƒÉng B√°c)
    - C√°c lo·∫°i chi ph√≠ (ƒÉn u·ªëng, ƒëi l·∫°i, v√© v√†o c·ªïng...) v√† s·ªë ti·ªÅn t∆∞∆°ng ·ª©ng
    
    H√£y h·ªèi t·ª´ng th√¥ng tin m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán, c√≥ emoji ·ªü cu·ªëi m·ªói c√¢u ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i nh√©! üòä
          `
        }
      ]
    };
    

    const conversation = [systemPrompt, ...messages, userMessage];
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const reply = await askGemini(conversation);
      const botMessage = { role: 'model', parts: [{ text: reply }] };
      setMessages((prev) => [...prev, botMessage]);
    } catch (err) {
      console.error(err);
      setMessages((prev) => [
        ...prev,
        { role: 'model', parts: [{ text: '‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn AI' }] }
      ]);
    } finally {
      setLoading(false);
      setTimeout(() => inputRef.current?.focus(), 0);
    }
  };

  const renderText = (msg: any) => msg.parts?.[0]?.text || msg.text || '';

  useEffect(() => {
    if (chatEndRef.current && chatHistoryRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
  }, [messages, loading]);

  return (
    <div className="home">
      <img src={logo} alt="CheapTrip Background Logo" className="background-logo" />


      <div className="chat-wrapper">
        <div className={`chat-box beautiful ${messages.length > 0 ? 'visible' : 'start-only'}`}>
          <div className="chat-history" ref={chatHistoryRef}>
            {messages.map((m, i) => (
              <div key={i} className={`chat-message ${m.role === 'user' ? 'user' : 'bot'}`}>
                <div className="message-content">{renderText(m)}</div>
              </div>
            ))}
            {loading && (
              <div className="chat-message bot">
                <div className="message-content">ƒê·ª£i ChipChip x√≠uuu...</div>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>

          <div className="chat-input-container beautiful">
            <textarea
              ref={inputRef}
              className="chat-input beautiful"
              placeholder="ChipChip nghe n√®..."
              rows={1}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSend();
                }
              }}
              disabled={loading}
            />
            <button className="send-button beautiful" onClick={handleSend} disabled={loading}>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path
                  d="M12 4L20 12L12 20L10.5 18.5L16 13H4V11H16L10.5 5.5L12 4Z"
                  fill="currentColor"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>

      <div className="scroll-indicator">
        <svg width="24" height="24" fill="#fff">
          <path
            d="M12 5V19M12 19L5 12M12 19L19 12"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      </div>
    </div>
  );
};

export default Home;
